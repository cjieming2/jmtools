#!/usr/bin/perl

use warnings;
use strict;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

vcf2phased

=head1 SYNOPSIS

 vcf2phased [options] <vcf-file>	

  -h help
  this script preprocesses the VCF file by randomly phasing ALL unphased genotypes in a VCF file
  
  -s seed for random number generator; 123456 (default), user can choose to use e.g. current date/time: -s $(date +%s)
  this serves to give reproducible genomes for VCF2diploid.
  
  this allows piping
  
  OUTPUT: STDOUT (default)
  Example:
     vcf2phased genotype.vcf > genotype.vcf2phased.vcf
  
=head1 DESCRIPTION

=cut

#option variables
my $myseed = 123456;
my $help;

#initialize options
Getopt::Long::Configure ('bundling');

if(!GetOptions ('s=s'=>\$myseed,'h'=>\$help) || scalar(@ARGV)!=1)
{
    if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}

#### set seed for randomization, randomly phased vcf files obtained from separate vcf2phased runs should be identical 
srand($myseed);

## input file
my $ifile = $ARGV[0];

open (INPUT, $ifile) || die "Cannot open $ifile: $!";

# variables
my $printflag = 0;
my @headers;
my %header2col;
my $sampleflag = 0;
my @samplescol;

# read file
LINE: while (<INPUT>)
{
	chomp $_;
	
	### print comment lines and then next
	if($_ =~ m/^#/){print "$_\n"; next;}
	
	### for non-comment lines
	my @data = split(/\t/,$_);
	
	for(my $i=0;$i<scalar(@data);$i++)
	{
		if($i<9){print "$data[$i]";}
		else
		{
			## phased gt
			if($data[$i] =~ m/\|/){print "$data[$i]";}
			else ## unphased gt
			{
				my @gt_format = split(/:/,$data[$i],2);
				my $gt = $gt_format[0];
				my $format = $gt_format[1];
				
				## process gt into alleles
				my @allele = split(/\//,$gt);
				
				## process format with and without anything after :
				## if empty, leave it as empty; else prepend a colon
				if(defined($format)){$format = ':'.$format}
				else{$format = '';}
				
				## if random num is > 0.5, swap positions of alleles
				my $random = rand();
				if($random > 0.5){print "$allele[1]\|$allele[0]$format";}
				else{print "$allele[0]\|$allele[1]$format";}				
			}
		}
		
		if($i == $#data){print "\n";}
		else{print "\t";}
	}
}

close(INPUT);
